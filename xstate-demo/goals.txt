A. Define states and state transitions
B. When in state A and event E occurs,
   a. determine next state (static).
   b. determine next state dynamically.
C. Run a function when:
   a. in state A, event E occurs, going to state B.
   b. leaving state A regardless of the event.
   c. arriving at state B regardless of the event.
D. Emit event E without needing to know the current state.
   The state machine handles the event. For example, a
   traffic light and emitting 'change' without knowing the
   current state.
E. Disallow invalid state transitions. For example, a traffic
   light does not allow going from 'green' to 'red'.
F. Automatically trigger a state change e.g. after a delay.

Some things to think about courtesy of James Forbes:

Monoidal concat. 2 + 2 = 4, I had a number, another number, and I got back a number.
Arrays of numbers: [1,2,3].concat([4,5,6]), I had a number[], another number[] and got back a number[].
A traffic light transition can be a monoidal concat.
red.concat(green) = green
red.concat(yellow) = red
green.concat(yellow) = yellow
green.concat(red) = green
etc.

Semigroup: concat / associativity.

Besides transitions, we can have logic and behaviours. For example, a function that determines whether we can drive:
canDrive :: light -> boolean
canDrive( green ) // true
canDrive( red ) // false

We can model a User = Registered(username) | Guest(). The application does not have a Guest state or a Registered
state. Instead, it has a User, and we can handle every permutation of User via discriminated unions so that we
can guarantee that our app is resilient to changing underlying properties.

Most of the time, events and transitions don't matter as long as we handle every case in our union.

Instead of mentally modelling in terms of events and transitions, model in terms of relationships.
Instead of "when a user logs in, display their username", think "the display is the logged in user's name."
Or replace "when the user scrolls the mouse, update the page scroll" with "the page scroll is directly proportional
to the physical scroll wheel's position."

Not all, but most things can be modelled as continuous functions instead of discrete events in our systems.
State synchronization is less difficult a problem when time is absent from the model.

When transition order matters, or when we cannot model the problem as a continuous relationship/function, we still
build on top of a sum type as the core primitive to get the maximum value out of decades long research on this
exact problem domain. We'll use common functions such as concat, map, fold, bifold, alt, flatMap, ... and
occasionally a custom transition modeled as a fold.

